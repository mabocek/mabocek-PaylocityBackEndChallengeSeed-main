# This workflow will build, test, and optionally deploy a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET CI/CD Pipeline

on:
  workflow_dispatch:
    inputs:
      deploy:
        description: 'Deploy after successful build and tests'
        required: false
        default: false
        type: boolean
      environment:
        description: 'Target environment for deployment'
        required: false
        default: 'development'
        type: choice
        options:
        - development
        - staging
        - production
#   push:
#     branches: [ "main" ]
#   pull_request:
#     branches: [ "main" ]

jobs:
  build:
    name: Build Application
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      artifact-name: ${{ steps.artifact.outputs.name }}

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x

  ## place for SAST job, e.g., using SonarQube or similar tools
    
    - name: Generate version
      id: version
      run: |
        VERSION=$(date +'%Y.%m.%d')-${{ github.run_number }}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Generated version: $VERSION"
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build
      run: dotnet build --no-restore --configuration Release
    
    - name: Set artifact name
      id: artifact
      run: |
        ARTIFACT_NAME="paylocity-api-${{ steps.version.outputs.version }}"
        echo "name=$ARTIFACT_NAME" >> $GITHUB_OUTPUT
        echo "Artifact name: $ARTIFACT_NAME"
    
    - name: Upload Build Output
      uses: actions/upload-artifact@v4
      with:
        name: build-output-${{ steps.version.outputs.version }}
        path: |
          Api/bin/Release/
          ApiTests/bin/Release/
        retention-days: 1

  unit-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    needs: build

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x
    
    - name: Download Build Output
      uses: actions/download-artifact@v4
      with:
        name: build-output-${{ needs.build.outputs.version }}
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Run Unit Tests
      run: dotnet test --no-build --configuration Release --verbosity normal --filter "Category!=Integration" --logger trx --results-directory TestResults/UnitTests/
    
    - name: Upload Unit Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unit-test-results-${{ needs.build.outputs.version }}
        path: TestResults/UnitTests/
        retention-days: 30

  integration-tests:
    name: Run Integration Tests
    runs-on: ubuntu-latest
    needs: build

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x
    
    - name: Download Build Output
      uses: actions/download-artifact@v4
      with:
        name: build-output-${{ needs.build.outputs.version }}
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Run Integration Tests (In-Process)
      run: dotnet test --no-build --configuration Release --verbosity normal --filter "Category=Integration" --logger trx --results-directory TestResults/IntegrationTests/ --collect:"XPlat Code Coverage"
      env:
        ASPNETCORE_ENVIRONMENT: Testing
    
    - name: Upload Integration Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-results-${{ needs.build.outputs.version }}
        path: TestResults/IntegrationTests/
        retention-days: 30

    - name: Upload Code Coverage
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: code-coverage-${{ needs.build.outputs.version }}
        path: TestResults/**/coverage.cobertura.xml
        retention-days: 30

  publish:
    name: Publish Application
    runs-on: ubuntu-latest
    needs: [build, unit-tests, integration-tests]
    if: success()

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build for Publishing
      run: dotnet build --configuration Release
    
    - name: Publish Application
      run: dotnet publish Api/Api.csproj --configuration Release --output ./publish --no-build
    
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ needs.build.outputs.artifact-name }}
        path: ./publish
        retention-days: 30

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [build, unit-tests, integration-tests]
    if: always()

    steps:
    - name: Download Unit Test Results
      uses: actions/download-artifact@v4
      if: needs.unit-tests.result != 'skipped'
      with:
        name: unit-test-results-${{ needs.build.outputs.version }}
        path: TestResults/UnitTests/
      continue-on-error: true
    
    - name: Download Integration Test Results
      uses: actions/download-artifact@v4
      if: needs.integration-tests.result != 'skipped'
      with:
        name: integration-test-results-${{ needs.build.outputs.version }}
        path: TestResults/IntegrationTests/
      continue-on-error: true
    
    - name: Download Code Coverage
      uses: actions/download-artifact@v4
      if: needs.integration-tests.result != 'skipped'
      with:
        name: code-coverage-${{ needs.build.outputs.version }}
        path: TestResults/Coverage/
      continue-on-error: true
    
    - name: Display Test Summary
      run: |
        echo "# Test Execution Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Job Results:" >> $GITHUB_STEP_SUMMARY
        echo "- **Build**: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Unit Tests**: ${{ needs.unit-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Integration Tests**: ${{ needs.integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Artifacts Generated:" >> $GITHUB_STEP_SUMMARY
        echo "- Version: ${{ needs.build.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- Artifact Name: ${{ needs.build.outputs.artifact-name }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -d "TestResults" ]; then
          echo "## Test Results Available:" >> $GITHUB_STEP_SUMMARY
          find TestResults -name "*.trx" -o -name "*.xml" | while read file; do
            echo "- $file" >> $GITHUB_STEP_SUMMARY
          done
        else
          echo "## Test Results: Not Available" >> $GITHUB_STEP_SUMMARY
        fi

  # SAST job can be added here if needed, for example using SonarQube or similar tools
  
  # Next would be the Deployment job
